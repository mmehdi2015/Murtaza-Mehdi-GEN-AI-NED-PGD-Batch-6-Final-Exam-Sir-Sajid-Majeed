# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# PyPI configuration file
.pypirc

pip install langchain openai faiss-cpu langsmith pandas
import os
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.text_splitter import CharacterTextSplitter
from langchain.document_loaders import TextLoader
from langchain.vectorstores import FAISS

# Load the document
file_path = r'd:\HR\HR-Policy-Revised-JUNE-2022.txt'
loader = TextLoader(file_path)
documents = loader.load()

# Split the documents into smaller chunks
text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)
texts = text_splitter.split_documents(documents)

# Create embeddings using OpenAI's embedding model
embeddings = OpenAIEmbeddings()

# Create a FAISS vector store to store the embeddings
faiss_index = FAISS.from_documents(texts, embeddings)

# Save the FAISS index for future use
faiss_index.save_local("faiss_index")

from langchain.chains import RetrievalQA
from langchain.llms import OpenAI

# Load the FAISS index
faiss_index = FAISS.load_local("faiss_index", embeddings)

# Setup the retriever
retriever = faiss_index.as_retriever(search_type="similarity", search_kwargs={"k": 5})

# Setup the LLM for response generation
llm = OpenAI(temperature=0.7)

# Create the Retrieval-Augmented Generation (RAG) chain
qa_chain = RetrievalQA.from_chain_type(llm=llm, chain_type="map_reduce", retriever=retriever)

# Query example
query = "What are the new policies for leave and time off?"
response = qa_chain.run(query)
print(response)

import langsmith

# Initialize LangSmith client (you will need your API key)
client = langsmith.Client(api_key="your-langsmith-api-key")

# Wrap the RAG chain for monitoring
from langsmith.prompts import tracked

@tracked(client)
def run_rag_pipeline(query):
    return qa_chain.run(query)

# Example usage of the RAG pipeline with LangSmith monitoring
response = run_rag_pipeline(query)
print(response)
import os
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.text_splitter import CharacterTextSplitter
from langchain.document_loaders import TextLoader
from langchain.vectorstores import FAISS
from langchain.chains import RetrievalQA
from langchain.llms import OpenAI
import langsmith

# LangSmith Setup
client = langsmith.Client(api_key="your-langsmith-api-key")

# Load and Split Document
file_path = r'd:\HR\HR-Policy-Revised-JUNE-2022.txt'
loader = TextLoader(file_path)
documents = loader.load()
text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)
texts = text_splitter.split_documents(documents)

# Embed the data
embeddings = OpenAIEmbeddings()
faiss_index = FAISS.from_documents(texts, embeddings)
faiss_index.save_local("faiss_index")

# Load FAISS Index and Set up Retrieval
faiss_index = FAISS.load_local("faiss_index", embeddings)
retriever = faiss_index.as_retriever(search_type="similarity", search_kwargs={"k": 5})

# Set up LLM
llm = OpenAI(temperature=0.7)

# Create RAG Chain
qa_chain = RetrievalQA.from_chain_type(llm=llm, chain_type="map_reduce", retriever=retriever)

# LangSmith Monitored Function
@langsmith.prompts.tracked(client)
def run_rag_pipeline(query):
    return qa_chain.run(query)

# Example Query
query = "What are the new policies for leave and time off?"
response = run_rag_pipeline(query)
print(response)



